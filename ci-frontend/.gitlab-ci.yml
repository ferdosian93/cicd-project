stages:
  - svc-build
  - docker-build
  - dev-release
  - stage-release
  - prod-release
  - notification
variables:
  DOCKER_ENVF_DEV: ci/docker/.env.dev
  DOCKER_ENVF_STAGE: ci/docker/.env.stage
  DOCKER_ENVF_PROD: ci/docker/.env.prod
  OUTPUT: ""
before_script:
  - date
Service Build:
  stage: svc-build
  image: harbor.tasn.ir/library/node:20.11.0
  variables:
    NODE_ENV: production
  before_script:
    - if echo "$CI_COMMIT_TAG" | grep -Eq 'dev$'; then eval $(cat $DOCKER_ENVF_DEV > .env); fi
    - if echo "$CI_COMMIT_TAG" | grep -Eq 'stage$'; then  eval $(cat $DOCKER_ENVF_STAGE > .env) ; fi
    - if echo "$CI_COMMIT_TAG" | grep -Eq 'release$'; then  eval $(cat $DOCKER_ENVF_PROD > .env) ; fi
  script:
    - yarn
    - yarn install --production=false
    - CI= npm run build
  artifacts:
    paths:
      - $CI_PROJECT_DIR/sample
      - .env
    expire_in: 6h
  cache:
    paths:
      - node_modules/
  only:
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[d][e][v]$/
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[s][t][a][g][e]$/
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[r][e][l][e][a][s][e]$/
  tags:
    - build
Docker Build:
  stage: docker-build
  image: $PREG/docker:latest
  services:
    - docker:dind
  before_script:
    #set graylog server base on tag
    - if echo "$CI_COMMIT_TAG" | grep -Eq 'dev$'; then sed -i -e 's/ENV GRAYLOG_SERVER="graylog.default"/ENV GRAYLOG_SERVER="172.25.25.51:12201"/g' $CI_PROJECT_DIR/$DOCKERFILE_PATH_CACHE; fi
    - if echo "$CI_COMMIT_TAG" | grep -Eq 'stage$'; then  sed -i -e 's/ENV GRAYLOG_SERVER="graylog.default"/ENV GRAYLOG_SERVER="172.25.25.51:12201"/g' $CI_PROJECT_DIR/$DOCKERFILE_PATH_CACHE ; fi
    - if echo "$CI_COMMIT_TAG" | grep -Eq 'release$'; then  sed -i -e 's/ENV GRAYLOG_SERVER="graylog.default"/ENV GRAYLOG_SERVER="graylog.tasn.ir:12201"/g' $CI_PROJECT_DIR/$DOCKERFILE_PATH_CACHE ; fi
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f $CI_PROJECT_DIR/$DOCKERFILE_PATH_CACHE -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
  only:
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[d][e][v]$/
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[s][t][a][g][e]$/
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[r][e][l][e][a][s][e]$/
  tags:
    - build
Development Release:
  stage: dev-release
  image: $PREG/docker-base-images/kuberunner:v2
  before_script:
    - eval $(cat $ENVF_DEV | sed 's/^/export /')
    - sed -i -e 's/="/:\ "/g' $ENVF_DEV
    - echo "TAG:"" $CI_COMMIT_TAG"
    - mkdir "$CD_TMP"
    - export K8S_NAMESPACE=ap-$(echo "$CI_PROJECT_NAMESPACE" | rev | cut -d "/" -f2 | rev)
  script:
    # Changes ENV
    - cat $ENVF_DEV >> ci/k8s/$CI_PROJECT_NAME-configmap.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-configmap.yaml > $CD_TMP/$CI_PROJECT_NAME-configmap.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-deployment.yaml > $CD_TMP/$CI_PROJECT_NAME-deployment.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-service.yaml > $CD_TMP/$CI_PROJECT_NAME-service.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-ingress.yaml > $CD_TMP/$CI_PROJECT_NAME-ingress.yaml
    # kubernetes File Validation
    - kubeval  $CD_TMP/* && echo "Kuber files Approved" || exit 1
    # GIT PUSH
    - git clone https://$DEPLOY_USER:$DEPLOY_TOKEN@$DEPLOY_PURL_AP_DEV --branch=master $CICD_TMP
    - cd $CICD_TMP
    - git config --global user.email "$GITLAB_USER_EMAIL" && git config --global user.name "$GITLAB_USER_LOGIN"
    - rm -rf "$CI_PROJECT_NAME/$LATEST" "$CI_PROJECT_NAME/$CI_COMMIT_TAG"
    - mkdir -p "$CI_PROJECT_NAME/$LATEST" "$CI_PROJECT_NAME/$CI_COMMIT_TAG"
    - cp -a $CI_PROJECT_DIR/$CD_TMP/*.yaml "$CI_PROJECT_NAME"/"$LATEST"/ && cp -a $CI_PROJECT_DIR/$CD_TMP/*.yaml "$CI_PROJECT_NAME"/"$CI_COMMIT_TAG"/
    - git add . && git commit -m "$CI_COMMIT_TAG" && git push origin master
  dependencies:
    - Docker Build
  only:
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[d][e][v]$/
  tags:
    - build
Stage Release:
  stage: stage-release
  image: $PREG/docker-base-images/kuberunner:v2
  before_script:
    - eval $(cat $ENVF_STAGE | sed 's/^/export /')
    - sed -i -e 's/="/:\ "/g' $ENVF_STAGE
    - echo "TAG:"" $CI_COMMIT_TAG"
    - mkdir "$CD_TMP"
    - export K8S_NAMESPACE=ap-$(echo "$CI_PROJECT_NAMESPACE" | rev | cut -d "/" -f2 | rev)
  script:
    # Changes ENV
    - cat $ENVF_STAGE >> ci/k8s/$CI_PROJECT_NAME-configmap.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-configmap.yaml > $CD_TMP/$CI_PROJECT_NAME-configmap.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-deployment.yaml > $CD_TMP/$CI_PROJECT_NAME-deployment.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-service.yaml > $CD_TMP/$CI_PROJECT_NAME-service.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-ingress.yaml > $CD_TMP/$CI_PROJECT_NAME-ingress.yaml
    # kubernetes File Validation
    - kubeval  $CD_TMP/* && echo "Kuber files Approved" || exit 1
    # GIT PUSH
    - git clone https://$DEPLOY_USER:$DEPLOY_TOKEN@$DEPLOY_PURL_AP_STAGE --branch=master $CICD_TMP
    - cd $CICD_TMP
    - git config --global user.email "$GITLAB_USER_EMAIL" &&  git config --global user.name "$GITLAB_USER_LOGIN"
    - rm -rf "$CI_PROJECT_NAME/$LATEST" "$CI_PROJECT_NAME/$CI_COMMIT_TAG"
    - mkdir -p "$CI_PROJECT_NAME/$LATEST" "$CI_PROJECT_NAME/$CI_COMMIT_TAG"
    - cp -a $CI_PROJECT_DIR/$CD_TMP/*.yaml "$CI_PROJECT_NAME"/"$LATEST"/ && cp -a $CI_PROJECT_DIR/$CD_TMP/*.yaml "$CI_PROJECT_NAME"/"$CI_COMMIT_TAG"/
    - git add . && git commit -m "$CI_COMMIT_TAG" && git push origin master
  dependencies:
    - Docker Build
  only:
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[s][t][a][g][e]$/
  tags:
    - build
Production Release:
  stage: prod-release
  image: $PREG/docker-base-images/kuberunner:v2
  before_script:
    - eval $(cat $ENVF_PROD | sed 's/^/export /')
    - sed -i -e 's/="/:\ "/g' $ENVF_PROD
    - echo "TAG:"" $CI_COMMIT_TAG"
    - mkdir "$CD_TMP"
    - export K8S_NAMESPACE=$(echo "$CI_PROJECT_NAMESPACE" | rev | cut -d "/" -f2 | rev)
  script:
    # Changes ENV
    - cat $ENVF_PROD >> ci/k8s/$CI_PROJECT_NAME-configmap.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-configmap.yaml > $CD_TMP/$CI_PROJECT_NAME-configmap.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-deployment.yaml > $CD_TMP/$CI_PROJECT_NAME-deployment.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-service.yaml > $CD_TMP/$CI_PROJECT_NAME-service.yaml
    - envsubst < ci/k8s/$CI_PROJECT_NAME-ingress.yaml > $CD_TMP/$CI_PROJECT_NAME-ingress.yaml
    # kubernetes File Validation
    - kubeval  $CD_TMP/* && echo "Kuber files Approved" || exit 1
    # GIT PUSH
    - git clone https://$DEPLOY_USER:$DEPLOY_TOKEN@$DEPLOY_PURL_AP_PROD --branch=master $CICD_TMP
    - cd $CICD_TMP
    - git config --global user.email "$GITLAB_USER_EMAIL" &&  git config --global user.name "$GITLAB_USER_LOGIN"
    - rm -rf "$CI_PROJECT_NAME/$LATEST" "$CI_PROJECT_NAME/$CI_COMMIT_TAG"
    - mkdir -p "$CI_PROJECT_NAME/$LATEST" "$CI_PROJECT_NAME/$CI_COMMIT_TAG"
    - cp -a $CI_PROJECT_DIR/$CD_TMP/*.yaml "$CI_PROJECT_NAME"/"$LATEST"/ && cp -a $CI_PROJECT_DIR/$CD_TMP/*.yaml "$CI_PROJECT_NAME"/"$CI_COMMIT_TAG"/
    - git add . && git commit -m "$CI_COMMIT_TAG" && git push origin master
  dependencies:
    - Docker Build
  only:
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[r][e][l][e][a][s][e]$/
  tags:
    - build
Notification:
  stage: notification
  image: $PREG/docker-base-images/kuberunner:v2
  script:
    - ROCKET_HOOK='{"alias":"Gitlab Post","emoji":":raccoon:","text":"Group:#'$CI_PROJECT_ROOT_NAMESPACE' , Project:#'$CI_PROJECT_NAME' ,Tag:#'$CI_COMMIT_TAG' \n Pipeline is Done!:heavy_check_mark:"}'
    - curl -X POST -H "Content-type:application/json" --data "$ROCKET_HOOK" $R_WEBHOOK
  only:
    - /^v\d{1,9}\.\d{1,9}\.\d{1,9}-[r][e][l][e][a][s][e]$/
  tags:
    - build
